#version 460

layout( local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#define POS ivec2(gl_GlobalInvocationID)

layout (binding=0, rgba32f)  uniform image2D target;

float log10(float value)
{
    return value / 2.3025850929940456840179914546844;
}

vec3 log10(vec3 value)
{
    return vec3(log10(value.x), log10(value.y), log10(value.z));
}

float saturate(float value)
{
    return clamp(value, 0.0, 1.0);
}

vec3 saturate(vec3 value)
{
    return vec3(saturate(value.x), saturate(value.y), saturate(value.z));
}

vec3 tonemapping_reinhard(vec3 colour)
{
    colour = colour / (colour + 1);
    return colour;
}

vec3 tonemapping_jim_richard(vec3 colour)
{
    vec3 x = max(vec3(0.0), colour - 0.004);
    colour = (x * (6.2 * x + 0.5)) / (x * (6.2 * x + 1.7) + 0.06);
    return colour;
}

vec3 tonemapping_uncharted_map(vec3 x)
{
    float A = 0.15;
    float B = 0.50;
    float C = 0.10;
    float D = 0.20;
    float E = 0.02;
    float F = 0.30;
    float W = 11.2;
    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

vec3 tonemapping_uncharted(vec3 colour)
{
    float exposure_bias = 2.0;
    vec3 current = tonemapping_uncharted_map(exposure_bias * colour);
    vec3 white_scale = 1.0 / tonemapping_uncharted_map(vec3(11.2));
    colour = current * white_scale;
    return colour;
}

void main() {
    ivec2 size = imageSize(target);
    if (POS.x >= size.x || POS.y > size.y) return;

    vec4 pixel = imageLoad(target, POS);

    pixel = vec4(tonemapping_uncharted(pixel.xyz), 1.0);

    pixel.x = pow(pixel.x, 1.0 / 2.2);
    pixel.y = pow(pixel.y, 1.0 / 2.2);
    pixel.z = pow(pixel.z, 1.0 / 2.2);
    pixel.w = 1.0f;

    imageStore(target, POS, pixel);
}
