#version 460

struct Vertex {
    vec4 position;
    vec4 normal;
};

layout(std430, binding = 0) buffer data_buffer {
    Vertex vertices[48];
};

layout(std430, binding = 1) buffer indices_buffer {
    uint indices[72];
};

layout (std430, binding = 2) buffer counter_buffer {
    uint count;
    uint instanceCount;
    uint FirstIndex;
    int baseIndex;
    uint reservedMustBeZero;
    uint vertex_count;
};

layout(local_size_x = 2, local_size_y = 1, local_size_z = 1) in;

uniform uint block1;
uniform uint block2;

#define ITXXV 0
#define ITXYV 1
#define ITYXV 2
#define ITYYV 3
#define IBXXV 4
#define IBXYV 5
#define IBYXV 6
#define IBYYV 7

#define FD 0
#define FT 1
#define FR 2
#define FL 3
#define FF 4
#define FB 5

vec3 NORMAL_LUT[6] = {
    vec3( 0, -1,  0),
    vec3( 0,  1,  0),
    vec3( 0,  0,  1),
    vec3( 0,  0, -1),
    vec3( 1,  0,  0),
    vec3(-1,  0,  0),
};

vec3 CVS[8] = {
    vec3(0, 1, 0),
    vec3(0, 1, 1),
    vec3(1, 1, 0),
    vec3(1, 1, 1),
    vec3(0, 0, 0),
    vec3(0, 0, 1),
    vec3(1, 0, 0),
    vec3(1, 0, 1),
};

uint cube_verts_size = 0;
vec4 cube_verts[24] = {
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
    vec4(0),
};

uint cube_indices_size = 0;
uint cube_indices[24] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

uint insert_vertex(uint vert_type, uint normal) {
    vec3 vert = CVS[vert_type];
    cube_verts[cube_verts_size++] = vec4(vert, uintBitsToFloat(normal));
    return cube_verts_size - 1;
}

void insert_index(uint index) {
    cube_indices[cube_indices_size++] = index;
}

void main() {
    uint block = gl_LocalInvocationID.x == 0 ? block1 : block2;

    bool faces[6];
    faces[FF] = bool(block & uint(0x8000));
    faces[FB] = bool(block & uint(0x4000));
    faces[FL] = bool(block & uint(0x2000));
    faces[FR] = bool(block & uint(0x1000));
    faces[FT] = bool(block & uint(0x800));
    faces[FD] = bool(block & uint(0x400));

    if (faces[FD]) {
        uint IBXX = insert_vertex(IBXXV, FD);
        uint IBXY = insert_vertex(IBXYV, FD);
        uint IBYX = insert_vertex(IBYXV, FD);
        uint IBYY = insert_vertex(IBYYV, FD);

        insert_index(IBXY);
        insert_index(IBXX);
        insert_index(IBYX);

        insert_index(IBYY);
        insert_index(IBXY);
        insert_index(IBYX);
    }

    if (faces[FT]) {
        uint ITXX = insert_vertex(ITXXV, FT);
        uint ITXY = insert_vertex(ITXYV, FT);
        uint ITYX = insert_vertex(ITYXV, FT);
        uint ITYY = insert_vertex(ITYYV, FT);

        insert_index(ITXX);
        insert_index(ITXY);
        insert_index(ITYX);

        insert_index(ITXY);
        insert_index(ITYY);
        insert_index(ITYX);
    }

    if (faces[FR]) {
        uint ITXY = insert_vertex(ITXYV, FR);
        uint ITYY = insert_vertex(ITYYV, FR);
        uint IBXY = insert_vertex(IBXYV, FR);
        uint IBYY = insert_vertex(IBYYV, FR);

        insert_index(ITYY);
        insert_index(ITXY);
        insert_index(IBXY);

        insert_index(IBYY);
        insert_index(ITYY);
        insert_index(IBXY);
    }

    if (faces[FL]) {
        uint ITXX = insert_vertex(ITXXV, FL);
        uint ITYX = insert_vertex(ITYXV, FL);
        uint IBXX = insert_vertex(IBXXV, FL);
        uint IBYX = insert_vertex(IBYXV, FL);

        insert_index(ITXX);
        insert_index(ITYX);
        insert_index(IBXX);

        insert_index(ITYX);
        insert_index(IBYX);
        insert_index(IBXX);
    }

    if (faces[FF]) {
        uint ITYX = insert_vertex(ITYXV, FF);
        uint ITYY = insert_vertex(ITYYV, FF);
        uint IBYX = insert_vertex(IBYXV, FF);
        uint IBYY = insert_vertex(IBYYV, FF);

        insert_index(ITYX);
        insert_index(ITYY);
        insert_index(IBYX);

        insert_index(ITYY);
        insert_index(IBYY);
        insert_index(IBYX);
    }

    if (faces[FB]) {
        uint ITXX = insert_vertex(ITXXV, FB);
        uint ITXY = insert_vertex(ITXYV, FB);
        uint IBXX = insert_vertex(IBXXV, FB);
        uint IBXY = insert_vertex(IBXYV, FB);

        insert_index(ITXY);
        insert_index(ITXX);
        insert_index(IBXX);

        insert_index(IBXY);
        insert_index(ITXY);
        insert_index(IBXX);
    }


    uint current_vertex_size = atomicAdd(vertex_count, cube_verts_size);
    for (int i = 0; i < cube_verts_size; i++)
    {
        vec4 vertex = cube_verts[i];
        vec3 pos = vertex.xyz + gl_LocalInvocationID.xyz;
        vec3 normal = NORMAL_LUT[floatBitsToUint(vertex.w)];
        vertices[i + current_vertex_size].position = vec4(pos, 1.0f);
        vertices[i + current_vertex_size].normal = vec4(normal, 1.0f);
    }

    uint current_index = atomicAdd(count, cube_indices_size);
    for (int i = 0; i < cube_indices_size; i++)
    {
        indices[i + current_index] = cube_indices[i] + current_vertex_size;
    }
}
